fragment projectFormFields on Project {
  vid
  name
  type
  region {
    vid
    name
    fullName
  }
  coordinates
  description
  version
  status
}

fragment commonError on Error {
  code
  message
  details
  payload
}

mutation UpdateProjectStatus($vid: UUID!, $data: ProjectStatusUpdateType!) {
  __typename,
  updateProjectStatus(vid: $vid, data: $data) {
    result {
      ... on Project {
        ...projectFormFields
      }
      ... on ErrorInterface {
        ...commonError
      }
      ... on ValidationError {
        items {
          path
          code
          message
        }
      }
      ... on UpdateProjectDiff {
        remoteProject {
          ...projectFormFields
        }
      }
    }
  }
}

mutation CreateBlankProject {
  __typename
  createProject(data: {}) {
    result {
      ... on Project {
        ...projectFormFields
      }
      ... on ValidationError {
        items {
          path
          code
          message
        }
      }
      ... on ErrorInterface {
        ...commonError
      }
    }
  }
}

mutation UpdateProjectForm($vid: UUID, $data: ProjectUpdateType) {
  __typename
  updateProject(vid: $vid, data: $data) {
    result {
      ... on Project {
      ...projectFormFields
      }
      ... on ErrorInterface {
        ...commonError
      }
      ... on ValidationError {
        items {
          path
          code
          message
        }
      }
      ... on UpdateProjectDiff {
        remoteProject {
          ...projectFormFields
        }
      }
    }
  }
}

query ProjectFormFields($vid: UUID!) {
  __typename
  project(vid: $vid) {
    ... on Project {
      ...projectFormFields
    }
    ... on Error {
      ...commonError
    }
  }
}

query ProjectFormRegionList {
  regionList {
    vid
    name
    fullName
    country {
      vid
      name
    }
  }
}

mutation DeleteBlankProject($vid: UUID) {
  __typename
  deleteProject(vid: $vid) {
    result {
      ... on Result {
        vid
      }
      ... on Error {
        ...commonError
      }
    }
  }
}
