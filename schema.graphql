schema {
  query: Query
  mutation: Mutation
}

type Activity {
  category: ActivityLibraryCategory
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
  title: String
  description: String
}

type ActivityLibraryCategory {
  vid: ID
  code: String
  name: String
  parent: ActivityLibraryCategory
}

type AddAttendees {
  result: [AttendeeOrError]
}

type Assembly {
  category: AssemblyLibraryCategory
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
  title: String
  description: String
}

type AssemblyLibraryCategory {
  vid: ID
  code: String
  name: String
  parent: AssemblyLibraryCategory
}

type Attachment {
  extension: String
  uri: String
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
  createdBy: User
  editedBy: User
  comment: String
  category: AttachmentType
  contentType: String
  status: Int
  projectId: ID
  size: Int
}

type AttachmentType {
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
}

type Attendee {
  user: User
  roles: [ProjectRole]
}

input AttendeeInputType {
  user: UUID!
  roles: [UUID]!
}

type AttendeeList {
  attendeeList: [Attendee]
}

union AttendeeListOrError = AttendeeList | Error

union AttendeeOrError = Attendee | Error

type Autoexport {
  id: Int
  type: String
  name: String
  caption: String
  yearStart: Int
  yearEnd: Int
  expenses: [OpexExpense]
}

type AverageAnnualPrice {
  year: Int
  price: Float
}

type Calculation {
  key: [String]
}

type Capex {
  yearStart: Int
  years: Int
  groups: [CapexExpenseGroup]
  globalValues: [CapexGlobalValue]
  initCalcDict: [Calculation]
}

type CapexExpense {
  Id: Int
  name: String
  caption: String
  unit: String
  value: YearValue
}

type CapexExpenseGroup {
  Id: Int
  name: String
  caption: String
  yearStart: Int
  years: Int
  expenses: [CapexExpense]
}

type CapexGlobalValue {
  Id: Int
  name: String
  caption: String
  unit: String
  value: SingleValue
}

type Component {
  category: ComponentLibraryCategory
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
  title: String
  description: String
}

type ComponentLibraryCategory {
  vid: ID
  code: String
  name: String
  parent: ComponentLibraryCategory
}

type CoordinateSystem {
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
  coordsNumber: Int
}

type Country {
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
}

type CreateActivity {
  result: Activity
}

type CreateActivityCategories {
  result: ActivityLibraryCategory
}

type CreateAssembly {
  result: Assembly
}

type CreateAssemblyCategories {
  result: AssemblyLibraryCategory
}

type CreateAttachment {
  result: Attachment
}

type CreateAttachmentType {
  result: AttachmentType
}

type CreateComponent {
  result: Component
}

type CreateComponentCategories {
  result: ComponentLibraryCategory
}

type CreateCoordinateSystem {
  result: CoordinateSystem
}

type CreateCountry {
  result: Country
}

type CreateDomain {
  result: Domain
}

type CreateDomainCategories {
  result: DomainLibraryCategory
}

type CreateDomainEntity {
  result: DomainEntity
}

type CreateDomainTemplate {
  result: DomainTemplate
}

type CreateDomainTemplateCategories {
  result: DomainLibraryCategory
}

type CreateOrganization {
  result: Organization
}

type CreateProject {
  result: ProjectOrError
}

type CreateProjectFile {
  result: ProjectFile
}

type CreateProjectLibrary {
  result: ProjectLibrary
}

type CreateProjectLibraryCategories {
  result: ProjectLibraryCategory
}

type CreateProjectRole {
  result: ProjectRole
}

type CreateRegion {
  result: Region
}

type CreateUser {
  result: User
}

type CreateUserGroup {
  result: UserGroup
}

scalar DateTime

type DeleteActivity {
  result: Boolean
}

type DeleteActivityCategories {
  result: Boolean
}

type DeleteAssembly {
  result: Boolean
}

type DeleteAssemblyCategories {
  result: Boolean
}

type DeleteAttachment {
  result: Boolean
}

type DeleteAttachmentType {
  result: Boolean
}

type DeleteComponent {
  result: Boolean
}

type DeleteComponentCategories {
  result: Boolean
}

type DeleteCoordinateSystem {
  result: Boolean
}

type DeleteCountry {
  result: Boolean
}

type DeleteDomain {
  result: Boolean
}

type DeleteDomainCategories {
  result: Boolean
}

type DeleteDomainEntity {
  result: Boolean
}

type DeleteDomainTemplate {
  result: Boolean
}

type DeleteDomainTemplateCategories {
  result: Boolean
}

type DeleteOrganization {
  result: Boolean
}

type DeleteProject {
  result: UuidOrError
}

type DeleteProjectFile {
  result: Boolean
}

type DeleteProjectLibrary {
  result: Boolean
}

type DeleteProjectLibraryCategories {
  result: Boolean
}

type DeleteProjectRole {
  result: Boolean
}

type DeleteRegion {
  result: Boolean
}

type DeleteUser {
  result: Boolean
}

type DeleteUserGroup {
  result: Boolean
}

scalar DictType

type Domain {
  category: DomainLibraryCategory
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
  title: String
  description: String
}

type DomainEntity {
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
}

type DomainEntityImage {
  vid: ID
  code: String
  title: String
  name: String
  entity: DomainEntity
  attributes: [PropertyMeta]
  description: String
}

type DomainLibraryCategory {
  vid: ID
  code: String
  name: String
  parent: DomainLibraryCategory
}

type DomainSchema {
  entityImages: [DomainEntityImage]
  version: String
}

type DomainTemplate {
  category: DomainLibraryCategory
  entity: DomainEntity
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
  title: String
  description: String
  attributes: [PropertyMeta]
}

type Error implements ErrorInterface {
  code: ErrorCodes!
  message: String!
  details: String
  payload: DictType
}

enum ErrorCodes {
  PROJECT_NOT_FOUND
  PROJECT_ALREADY_REMOVED
  PROJECT_UPDATE_ERROR
  REFERENCE_ITEM_NOT_FOUND
  ERROR
  INCORRECT_PROJECT_VERSION
  PROJECT_VERSION_DIFF_ERROR
}

interface ErrorInterface {
  code: ErrorCodes!
  message: String!
  details: String
  payload: DictType
}

type Macroparameter {
  Id: Int
  name: String
  caption: String
  unit: String
  years: Int
  yearStart: Int
  value: YearValue
}

type MacroparameterGroup {
  Id: Int
  name: String
  caption: String
  years: Int
  yearStart: Int
  parameters: [Macroparameter]
}

type MacroparameterSet {
  Id: Int
  name: String
  caption: String
  years: Int
  yearStart: Int
  category: Int
  groups: [MacroparameterGroup]
}

type Mkos {
  id: Int
  type: String
  name: String
  caption: String
  yearStart: Int
  yearEnd: Int
  expenses: [OpexExpense]
}

type Mutation {
  createProjectLibrary(category: UUID, code: String, createdAt: DateTime, description: String, editedAt: DateTime, isDeleted: Boolean, name: String, title: String, vid: UUID): CreateProjectLibrary
  deleteProjectLibrary(vid: UUID): DeleteProjectLibrary
  updateProjectLibrary(category: UUID, code: String, createdAt: DateTime, description: String, editedAt: DateTime, isDeleted: Boolean, name: String, title: String, vid: UUID): UpdateProjectLibrary
  createProjectLibraryCategories(code: String, isDeleted: Boolean, name: String, parent: UUID, vid: UUID): CreateProjectLibraryCategories
  deleteProjectLibraryCategories(vid: UUID): DeleteProjectLibraryCategories
  updateProjectLibraryCategories(code: String, isDeleted: Boolean, name: String, parent: UUID, vid: UUID): UpdateProjectLibraryCategories
  createDomain(category: UUID, code: String, createdAt: DateTime, description: String, editedAt: DateTime, isDeleted: Boolean, name: String, title: String, vid: UUID): CreateDomain
  deleteDomain(vid: UUID): DeleteDomain
  updateDomain(category: UUID, code: String, createdAt: DateTime, description: String, editedAt: DateTime, isDeleted: Boolean, name: String, title: String, vid: UUID): UpdateDomain
  createDomainCategories(code: String, isDeleted: Boolean, name: String, parent: UUID, vid: UUID): CreateDomainCategories
  deleteDomainCategories(vid: UUID): DeleteDomainCategories
  updateDomainCategories(code: String, isDeleted: Boolean, name: String, parent: UUID, vid: UUID): UpdateDomainCategories
  createComponent(category: UUID, code: String, createdAt: DateTime, description: String, editedAt: DateTime, isDeleted: Boolean, name: String, title: String, vid: UUID): CreateComponent
  deleteComponent(vid: UUID): DeleteComponent
  updateComponent(category: UUID, code: String, createdAt: DateTime, description: String, editedAt: DateTime, isDeleted: Boolean, name: String, title: String, vid: UUID): UpdateComponent
  createComponentCategories(code: String, isDeleted: Boolean, name: String, parent: UUID, vid: UUID): CreateComponentCategories
  deleteComponentCategories(vid: UUID): DeleteComponentCategories
  updateComponentCategories(code: String, isDeleted: Boolean, name: String, parent: UUID, vid: UUID): UpdateComponentCategories
  createAssembly(category: UUID, code: String, createdAt: DateTime, description: String, editedAt: DateTime, isDeleted: Boolean, name: String, title: String, vid: UUID): CreateAssembly
  deleteAssembly(vid: UUID): DeleteAssembly
  updateAssembly(category: UUID, code: String, createdAt: DateTime, description: String, editedAt: DateTime, isDeleted: Boolean, name: String, title: String, vid: UUID): UpdateAssembly
  createAssemblyCategories(code: String, isDeleted: Boolean, name: String, parent: UUID, vid: UUID): CreateAssemblyCategories
  deleteAssemblyCategories(vid: UUID): DeleteAssemblyCategories
  updateAssemblyCategories(code: String, isDeleted: Boolean, name: String, parent: UUID, vid: UUID): UpdateAssemblyCategories
  createActivity(category: UUID, code: String, createdAt: DateTime, description: String, editedAt: DateTime, isDeleted: Boolean, name: String, title: String, vid: UUID): CreateActivity
  deleteActivity(vid: UUID): DeleteActivity
  updateActivity(category: UUID, code: String, createdAt: DateTime, description: String, editedAt: DateTime, isDeleted: Boolean, name: String, title: String, vid: UUID): UpdateActivity
  createActivityCategories(code: String, isDeleted: Boolean, name: String, parent: UUID, vid: UUID): CreateActivityCategories
  deleteActivityCategories(vid: UUID): DeleteActivityCategories
  updateActivityCategories(code: String, isDeleted: Boolean, name: String, parent: UUID, vid: UUID): UpdateActivityCategories
  createDomainTemplate(attributes: [PropertyMetaInputType], category: UUID, code: String, createdAt: DateTime, description: String, editedAt: DateTime, entity: UUID, isDeleted: Boolean, name: String, title: String, vid: UUID): CreateDomainTemplate
  deleteDomainTemplate(vid: UUID): DeleteDomainTemplate
  updateDomainTemplate(attributes: [PropertyMetaInputType], category: UUID, code: String, createdAt: DateTime, description: String, editedAt: DateTime, entity: UUID, isDeleted: Boolean, name: String, title: String, vid: UUID): UpdateDomainTemplate
  createDomainTemplateCategories(code: String, isDeleted: Boolean, name: String, parent: UUID, vid: UUID): CreateDomainTemplateCategories
  deleteDomainTemplateCategories(vid: UUID): DeleteDomainTemplateCategories
  updateDomainTemplateCategories(code: String, isDeleted: Boolean, name: String, parent: UUID, vid: UUID): UpdateDomainTemplateCategories
  createUser(adId: String, code: String, createdAt: DateTime, editedAt: DateTime, favoriteProjects: [UUID], firstName: String, groups: [UUID], isDeleted: Boolean, lastName: String, login: String, name: String, patronym: String, role: String, vid: UUID): CreateUser
  deleteUser(vid: UUID): DeleteUser
  updateUser(adId: String, code: String, createdAt: DateTime, editedAt: DateTime, favoriteProjects: [UUID], firstName: String, groups: [UUID], isDeleted: Boolean, lastName: String, login: String, name: String, patronym: String, role: String, vid: UUID): UpdateUser
  createProjectRole(code: String, createdAt: DateTime, defaultAttachmentType: UUID, editedAt: DateTime, isDeleted: Boolean, name: String, vid: UUID): CreateProjectRole
  deleteProjectRole(vid: UUID): DeleteProjectRole
  updateProjectRole(code: String, createdAt: DateTime, defaultAttachmentType: UUID, editedAt: DateTime, isDeleted: Boolean, name: String, vid: UUID): UpdateProjectRole
  createAttachmentType(code: String, createdAt: DateTime, editedAt: DateTime, isDeleted: Boolean, name: String, vid: UUID): CreateAttachmentType
  deleteAttachmentType(vid: UUID): DeleteAttachmentType
  updateAttachmentType(code: String, createdAt: DateTime, editedAt: DateTime, isDeleted: Boolean, name: String, vid: UUID): UpdateAttachmentType
  createUserGroup(code: String, createdAt: DateTime, editedAt: DateTime, isDeleted: Boolean, name: String, vid: UUID): CreateUserGroup
  deleteUserGroup(vid: UUID): DeleteUserGroup
  updateUserGroup(code: String, createdAt: DateTime, editedAt: DateTime, isDeleted: Boolean, name: String, vid: UUID): UpdateUserGroup
  createOrganization(code: String, createdAt: DateTime, editedAt: DateTime, isDeleted: Boolean, name: String, vid: UUID): CreateOrganization
  deleteOrganization(vid: UUID): DeleteOrganization
  updateOrganization(code: String, createdAt: DateTime, editedAt: DateTime, isDeleted: Boolean, name: String, vid: UUID): UpdateOrganization
  createCountry(code: String, createdAt: DateTime, editedAt: DateTime, isDeleted: Boolean, name: String, vid: UUID): CreateCountry
  deleteCountry(vid: UUID): DeleteCountry
  updateCountry(code: String, createdAt: DateTime, editedAt: DateTime, isDeleted: Boolean, name: String, vid: UUID): UpdateCountry
  createRegion(code: String, country: UUID, createdAt: DateTime, editedAt: DateTime, fullName: String, isDeleted: Boolean, name: String, vid: UUID): CreateRegion
  deleteRegion(vid: UUID): DeleteRegion
  updateRegion(code: String, country: UUID, createdAt: DateTime, editedAt: DateTime, fullName: String, isDeleted: Boolean, name: String, vid: UUID): UpdateRegion
  createCoordinateSystem(code: String, coordsNumber: Int, createdAt: DateTime, editedAt: DateTime, isDeleted: Boolean, name: String, vid: UUID): CreateCoordinateSystem
  deleteCoordinateSystem(vid: UUID): DeleteCoordinateSystem
  updateCoordinateSystem(code: String, coordsNumber: Int, createdAt: DateTime, editedAt: DateTime, isDeleted: Boolean, name: String, vid: UUID): UpdateCoordinateSystem
  createAttachment(category: UUID, code: String, comment: String, contentType: String, createdAt: DateTime, createdBy: UUID, editedAt: DateTime, editedBy: UUID, isDeleted: Boolean, name: String, projectId: UUID, size: Int, status: Int, vid: UUID): CreateAttachment
  deleteAttachment(vid: UUID): DeleteAttachment
  updateAttachment(category: UUID, code: String, comment: String, contentType: String, createdAt: DateTime, createdBy: UUID, editedAt: DateTime, editedBy: UUID, isDeleted: Boolean, name: String, projectId: UUID, size: Int, status: Int, vid: UUID): UpdateAttachment
  createProjectFile(category: String, code: String, comment: String, createdAt: DateTime, editedAt: DateTime, extension: String, isDeleted: Boolean, name: String, size: Int, uri: String, vid: UUID): CreateProjectFile
  deleteProjectFile(vid: UUID): DeleteProjectFile
  updateProjectFile(category: String, code: String, comment: String, createdAt: DateTime, editedAt: DateTime, extension: String, isDeleted: Boolean, name: String, size: Int, uri: String, vid: UUID): UpdateProjectFile
  createDomainEntity(code: String, createdAt: DateTime, editedAt: DateTime, isDeleted: Boolean, name: String, vid: UUID): CreateDomainEntity
  deleteDomainEntity(vid: UUID): DeleteDomainEntity
  updateDomainEntity(code: String, createdAt: DateTime, editedAt: DateTime, isDeleted: Boolean, name: String, vid: UUID): UpdateDomainEntity
  createProject(data: ProjectInputType): CreateProject
  deleteProject(vid: UUID): DeleteProject
  updateProject(data: ProjectUpdateType, vid: UUID): UpdateProject
  addAttendees(attendees: [AttendeeInputType]!, projectId: UUID!): AddAttendees
  removeAttendees(attendees: [UUID]!, projectId: UUID!): RemoveAttendees
}

type NetbackPrice {
  name: String
  prices: [AverageAnnualPrice]
  netbackType: String
  units: String
}

type Opex {
  autoexport: Autoexport
  mkos: Mkos
  cases: [OpexCase]
  values: [Int]
  initDict: YearValue
}

type OpexCase {
  id: Int
  type: String
  name: String
  caption: String
  yearStart: Int
  yearEnd: Int
  expenses: [OpexExpense]
}

type OpexExpense {
  id: String
  name: String
  caption: String
  unit: String
  description: String
  value: YearValue
}

type Organization {
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
}

type Product {
  name: String
  prices: [AverageAnnualPrice]
  units: String
}

type ProductType {
  name: String
  netback: NetbackPrice
  products: [Product]
}

type Project {
  isFavorite: Boolean
  attendeesTotal: Int
  filesTotal: Int
  files: [Attachment]
  attendees: [Attendee]
  yearEnd: Int
  domainSchema: DomainSchema
  vid: ID
  code: String
  name: String
  createdAt: DateTime
  editedAt: DateTime
  type: String
  createdBy: User
  editedBy: User
  authorUnit: String
  region: Region
  coordinates: String
  coordinateSystem: CoordinateSystem
  description: String
  rootEntity: String
  status: String
  resourceId: String
  planningHorizon: String
  yearStart: Int
  years: Int
  capex: Capex
  opex: Opex
  macroparameterSets: [MacroparameterSet]
  scenario: [Scenario]
  version: Int
}

union ProjectDiffOrError = Project | UpdateProjectDiff | Error

type ProjectFile {
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
  size: Int
  extension: String
  category: String
  comment: String
  uri: String
}

input ProjectInputType {
  name: String!
  type: String = "\\u0413\\u0435\\u043e\\u043b\\u043e\\u0433\\u043e\\u0440\\u0430\\u0437\\u0432\\u0435\\u0434\\u043e\\u0447\\u043d\\u044b\\u0439"
  region: ID
  coordinateSystem: ID
  coordinates: String
  description: String
  resourceId: String
  planningHorizon: String
  yearStart: Int = 2021
  years: Int = 25
}

type ProjectLibrary {
  category: ProjectLibraryCategory
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
  title: String
  description: String
}

type ProjectLibraryCategory {
  vid: ID
  code: String
  name: String
  parent: ProjectLibraryCategory
}

type ProjectList {
  projectList: [Project]
}

union ProjectListOrError = ProjectList | Error

union ProjectOrError = Project | Error

type ProjectRole {
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
  defaultAttachmentType: AttachmentType
}

enum ProjectStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  PAUSED
  REMOVED
}

input ProjectUpdateType {
  name: String
  type: String = "\\u0413\\u0435\\u043e\\u043b\\u043e\\u0433\\u043e\\u0440\\u0430\\u0437\\u0432\\u0435\\u0434\\u043e\\u0447\\u043d\\u044b\\u0439"
  region: ID
  coordinateSystem: ID
  coordinates: String
  description: String
  status: ProjectStatus! = draft
  isFavorite: Boolean
  resourceId: String
  planningHorizon: String
  yearStart: Int
  years: Int
  version: Int!
}

type PropertyMeta {
  title: String
  name: String
  entity: DomainEntity
  attrType: String
  unit: String
  validationRules: ValidationRules
  description: String
}

input PropertyMetaInputType {
  title: String
  name: String
  entity: UUID
  attrType: String
  unit: String
  validationRules: ValidationRulesInputType
  description: String
  required: Boolean
}

type Query {
  projectLibrarylist: [ProjectLibrary]
  projectLibrary(vid: UUID): ProjectLibrary
  projectLibraryCategoriesList: [ProjectLibraryCategory]
  projectLibraryCategories(vid: UUID): ProjectLibraryCategory
  domainList: [Domain]
  domain(vid: UUID): Domain
  domainCategoriesList: [DomainLibraryCategory]
  domainCategories(vid: UUID): DomainLibraryCategory
  componentList: [Component]
  component(vid: UUID): Component
  componentCategoriesList: [ComponentLibraryCategory]
  componentCategories(vid: UUID): ComponentLibraryCategory
  assemblyList: [Assembly]
  assembly(vid: UUID): Assembly
  assemblyCategoriesList: [AssemblyLibraryCategory]
  assemblyCategories(vid: UUID): AssemblyLibraryCategory
  activityList: [Activity]
  activity(vid: UUID): Activity
  activityCategoriesList: [ActivityLibraryCategory]
  activityCategories(vid: UUID): ActivityLibraryCategory
  domainTemplatelist: [DomainTemplate]
  domainTemplate(vid: UUID): DomainTemplate
  domainTemplateCategoriesList: [DomainLibraryCategory]
  domainTemplateCategories(vid: UUID): DomainLibraryCategory
  userList: [User]
  user(vid: UUID): User
  projectRoleList: [ProjectRole]
  projectRole(vid: UUID): ProjectRole
  attachmentTypeList: [AttachmentType]
  attachmentType(vid: UUID): AttachmentType
  userGroupList: [UserGroup]
  userGroup(vid: UUID): UserGroup
  organizationList: [Organization]
  organization(vid: UUID): Organization
  countryList: [Country]
  country(vid: UUID): Country
  regionList: [Region]
  region(vid: UUID): Region
  coordinateSystemList: [CoordinateSystem]
  coordinateSystem(vid: UUID): CoordinateSystem
  attachmentList: [Attachment]
  attachment(vid: UUID): Attachment
  projectFileList: [ProjectFile]
  projectFile(vid: UUID): ProjectFile
  domainEntityList: [DomainEntity]
  domainEntity(vid: UUID): DomainEntity
  project(vid: UUID, version: Int): ProjectOrError
  projectList: ProjectListOrError
  me: User
}

type Region {
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
  fullName: String
  country: Country
}

type RemoveAttendees {
  result: AttendeeListOrError
}

type Result {
  vid: UUID
}

type Scenario {
  id: Int
  name: Float
  productTypes: [ProductType]
}

type SingleValue {
  type: String
  value: Float
}

scalar UUID

type UpdateActivity {
  result: Activity
}

type UpdateActivityCategories {
  result: Activity
}

type UpdateAssembly {
  result: Assembly
}

type UpdateAssemblyCategories {
  result: Assembly
}

type UpdateAttachment {
  result: Attachment
}

type UpdateAttachmentType {
  result: AttachmentType
}

type UpdateComponent {
  result: Component
}

type UpdateComponentCategories {
  result: Component
}

type UpdateCoordinateSystem {
  result: CoordinateSystem
}

type UpdateCountry {
  result: Country
}

type UpdateDomain {
  result: Domain
}

type UpdateDomainCategories {
  result: Domain
}

type UpdateDomainEntity {
  result: DomainEntity
}

type UpdateDomainTemplate {
  result: DomainTemplate
}

type UpdateDomainTemplateCategories {
  result: DomainTemplate
}

type UpdateOrganization {
  result: Organization
}

type UpdateProject {
  result: ProjectDiffOrError
}

type UpdateProjectDiff {
  remoteProject: Project
  localProject: Project
  message: String
}

type UpdateProjectFile {
  result: ProjectFile
}

type UpdateProjectLibrary {
  result: ProjectLibrary
}

type UpdateProjectLibraryCategories {
  result: ProjectLibrary
}

type UpdateProjectRole {
  result: ProjectRole
}

type UpdateRegion {
  result: Region
}

type UpdateUser {
  result: User
}

type UpdateUserGroup {
  result: UserGroup
}

type User {
  name: String
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  login: String
  firstName: String
  patronym: String
  lastName: String
  adId: String
  role: String
  favoriteProjects: [ID]
  groups: [UserGroup]
}

type UserGroup {
  vid: ID
  code: String
  createdAt: DateTime
  editedAt: DateTime
  name: String
}

union UuidOrError = Result | Error

type ValidationRules {
  rules: [String]
}

input ValidationRulesInputType {
  rules: [String]
}

type YearValue {
  type: String
}
